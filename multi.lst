0001   0000             ;; zx81 -fibonacci 
0002   0000             
0003   0000             #include "zx81defs.asm" ;; https://www.sinclairzxworld.com/viewtopic.php?t=2186&start=40
0001+  0000             ;defines to make us feel more at home
0002+  0000             #define         DEFB .BYTE
0003+  0000             #define         DEFW .WORD
0004+  0000             #define         DEFM .TEXT
0005+  0000             #define         ORG  .ORG
0006+  0000             #define         EQU  .EQU
0004   0000             ;EQUs for ROM routines
0005   0000             #include "zx81rom.asm"
0001+  0000             ;ZX81 ROM routines
0002+  0000             PRINT			EQU $10
0003+  0000             PRINTAT			EQU $08F5
0004+  0000             DISPROUT		EQU $0281
0005+  0000             ;D_FILE			EQU	$400C
0006+  0000             DISPLAY_3		EQU $0292 ;restore registers after a 'slow' display
0007+  0000             DISPLAY_5		EQU $02B5
0008+  0000             PLOT			EQU $0BB2 	; note ROM plot is 0baf - however first thing it does try to pull BC from the calculator stack
0009+  0000             							; so we'll skip past that and set BC ourselves
0010+  0000             CLS				EQU $0A2A
0011+  0000             KSCAN           EQU $02BB 
0012+  0000             FINDCHR         EQU $07BD
0013+  0000             COPY            EQU $0869
0014+  0000             FAST            EQU $0F23
0015+  0000             SLOW            EQU $0F2B
0016+  0000             SLOWORFAST		EQU $0207
0017+  0000             PAUSE			EQU $0F32
0018+  0000             SCROLL 			EQU $0C0E
0019+  0000             ;sys vars
0020+  0000             ERR_NR			EQU $40000006   0000             ;ZX81 char codes/how to survive without ASCII
0007   0000             #include "charcodes.asm"
0001+  0000             ; ZX81 Characters.
0002+  0000             __:				EQU	$00	;spacja
0003+  0000             _QT:			EQU	$0B	;"
0004+  0000             _PD:			EQU	$0C	;funt
0005+  0000             _SD:			EQU	$0D	;$
0006+  0000             _CL:			EQU	$0E	;:
0007+  0000             _QM:			EQU	$0F	;?
0008+  0000             _OP:			EQU	$10	;(
0009+  0000             _CP:			EQU	$11	;)
0010+  0000             _GT:			EQU	$12	;>
0011+  0000             _LT:			EQU	$13	;<
0012+  0000             _EQ:			EQU	$14	;=
0013+  0000             _PL:			EQU	$15	;+
0014+  0000             _MI:			EQU	$16	;-
0015+  0000             _AS:			EQU	$17	;*
0016+  0000             _SL:			EQU	$18	;/
0017+  0000             _SC:			EQU	$19	;;
0018+  0000             _CM:			EQU	$1A	;,
0019+  0000             _DT:			EQU	$1B	;.
0020+  0000             _NL:			EQU	$76	;NEWLINE
0021+  0000             
0022+  0000             _0				EQU $1C
0023+  0000             _1				EQU $1D
0024+  0000             _2				EQU $1E
0025+  0000             _3				EQU $1F
0026+  0000             _4				EQU $20
0027+  0000             _5				EQU $21
0028+  0000             _6				EQU $22
0029+  0000             _7				EQU $23
0030+  0000             _8				EQU $24
0031+  0000             _9				EQU $25
0032+  0000             _A				EQU $26
0033+  0000             _B				EQU $27
0034+  0000             _C				EQU $28
0035+  0000             _D				EQU $29
0036+  0000             _E				EQU $2A
0037+  0000             _F				EQU $2B
0038+  0000             _G				EQU $2C
0039+  0000             _H				EQU $2D
0040+  0000             _I				EQU $2E
0041+  0000             _J				EQU $2F
0042+  0000             _K				EQU $30
0043+  0000             _L				EQU $31
0044+  0000             _M				EQU $32
0045+  0000             _N				EQU $33
0046+  0000             _O				EQU $34
0047+  0000             _P				EQU $35
0048+  0000             _Q				EQU $36
0049+  0000             _R				EQU $37
0050+  0000             _S				EQU $38
0051+  0000             _T				EQU $39
0052+  0000             _U				EQU $3A
0053+  0000             _V				EQU $3B
0054+  0000             _W				EQU $3C
0055+  0000             _X				EQU $3D
0056+  0000             _Y				EQU $3E
0057+  0000             _Z				EQU $3F
0008   0000             ;system variables
0009   0000             #include "zx81sys.asm"
0001+  0000             ;system variables
0002+  0000             ;Origin of a ZX81 file is always 16393
0003+  0000             
0004+  4009                             ORG 16393
0005+  4009                             
0006+  4009             ; System variables live here
0007+  4009 00          VERSN:          DEFB 0
0008+  400A 02 00       E_PPC:          DEFW 2
0009+  400C 3F 41       D_FILE:         DEFW Display
0010+  400E 40 41       DF_CC:          DEFW Display+1                  ; First character of display
0011+  4010 58 44       VARS:           DEFW Variables
0012+  4012 00 00       DEST:           DEFW 0
0013+  4014 59 44       E_LINE:         DEFW BasicEnd 
0014+  4016 5D 44       CH_ADD:         DEFW BasicEnd+4                 ; Simulate SAVE "X"
0015+  4018 00 00       X_PTR:          DEFW 0
0016+  401A 5E 44       STKBOT:         DEFW BasicEnd+5
0017+  401C 5E 44       STKEND:         DEFW BasicEnd+5                 ; Empty stack
0018+  401E 00          BREG:           DEFB 0
0019+  401F 5D 40       MEM:            DEFW MEMBOT
0020+  4021 00          UNUSED1:        DEFB 0
0021+  4022 02          DF_SZ:          DEFB 2
0022+  4023 02 00       S_TOP:          DEFW $0002                      ; Top program line number
0023+  4025 BF FD       LAST_K:         DEFW $fdbf
0024+  4027 0F          DEBOUN:         DEFB 15
0025+  4028 37          MARGIN:         DEFB 55
0026+  4029 2D 41       NXTLIN:         DEFW Line2                      ; Next line address
0027+  402B 00 00       OLDPPC:         DEFW 0
0028+  402D 00          FLAGX:          DEFB 0
0029+  402E 00 00       STRLEN:         DEFW 0
0030+  4030 8D 0C       T_ADDR:         DEFW $0c8d
0031+  4032 00 00       SEED:           DEFW 0
0032+  4034 A3 F5       FRAMES:         DEFW $f5a3
0033+  4036 00 00       COORDS:         DEFW 0
0034+  4038 BC          PR_CC:          DEFB $bc
0035+  4039 21 18       S_POSN:         DEFW $1821
0036+  403B 40          CDFLAG:         DEFB $40
0037+  403C 00 00 00 00 PRBUFF:         DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,$76 ; 32 Spaces + Newline
0037+  4040 00 00 00 00 
0037+  4044 00 00 00 00 
0037+  4048 00 00 00 00 
0037+  404C 00 00 00 00 
0037+  4050 00 00 00 00 
0037+  4054 00 00 00 00 
0037+  4058 00 00 00 00 
0037+  405C 76 
0038+  405D 00 00 00 00 MEMBOT:         DEFB 0,0,0,0,0,0,0,0,0,0,$84,$20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; 30 zeros
0038+  4061 00 00 00 00 
0038+  4065 00 00 84 20 
0038+  4069 00 00 00 00 
0038+  406D 00 00 00 00 
0038+  4071 00 00 00 00 
0038+  4075 00 00 00 00 
0038+  4079 00 00 
0039+  407B 00 00       UNUNSED2:       DEFW 0
0040+  407D             
0041+  407D             ; End of system variables
0042+  407D             
0010   407D             
0011   407D             ;the standard REM statement that will contain our 'hex' code
0012   407D             #include "line1.asm"
0001+  407D             ;Line 1
0002+  407D             ;this is the REM statement...
0003+  407D 00 00       Line1:          DEFB $00,$00                    ; Line 1
0004+  407F AC 00                       DEFW Line1End-Line1Text         ; Line 1 length
0005+  4081 EA          Line1Text:      DEFB $ea                        ; REM             
0006+  4082             
0013   4082             
0014   4082             
0015   4082 C3 CF 40    	jp start
0016   4085             	
0017   4085             m1_mem
0018   4085 00 00       	DEFB 0,0
0019   4087             m2_mem
0020   4087 00 00       	DEFB 0,0
0021   4089             answer_mem
0022   4089 00 00       	DEFB 0,0
0023   408B             to_print_mem
0024   408B 00 00       	DEFB 0,0
0025   408D             mainLoopCount_mem
0026   408D 00          	DEFB 0
0027   408E             mainCLSCountDown_mem
0028   408E 00          	DEFB 0
0029   408F             
0030   408F             mainLoopCount .equ mainLoopCount_mem
0031   408F             m1 		.equ m1_mem ;use in sum128
0032   408F             m2 		.equ m2_mem ;use in sum128
0033   408F             answer 	.equ answer_mem ;use in sum128
0034   408F             to_print .equ to_print_mem ;use hprint128
0035   408F             
0036   408F             hprint16  ; print one 2byte number stored in location $to_print modified from hprint http://swensont.epizy.com/ZX81Assembly.pdf?i=1
0037   408F             	;ld hl,$to_print
0038   408F 21 8C 40    	ld hl,$to_print+$01	
0039   4092 06 02       	ld b,2	
0040   4094             hprint16_loop	
0041   4094 7E          	ld a, (hl)
0042   4095 F5          	push af ;store the original value of a for later
0043   4096 E6 F0       	and $f0 ; isolate the first digit
0044   4098 1F          	rra
0045   4099 1F          	rra
0046   409A 1F          	rra
0047   409B 1F          	rra
0048   409C C6 1C       	add a,$1c ; add 28 to the character code
0049   409E CD 10 00    	call PRINT ;
0050   40A1 F1          	pop af ; retrieve original value of a
0051   40A2 E6 0F       	and $0f ; isolate the second digit
0052   40A4 C6 1C       	add a,$1c ; add 28 to the character code
0053   40A6 CD 10 00    	call PRINT
0054   40A9 3E 00       	ld a, 00;_NL ;print new line ; 00 is space
0055   40AB             	;call PRINT ; print a space character
0056   40AB             	
0057   40AB 2B          	dec hl
0058   40AC 10 E6       	djnz hprint16_loop
0059   40AE             	; restore registers
0060   40AE 3E 76       	ld a, _NL
0061   40B0 CD 10 00    	call PRINT
0062   40B3 C9          	ret	
0063   40B4             	
0064   40B4             ;; multiply DE and BC
0065   40B4             ;; DE is equivalent to the number in the top row in our algorithm
0066   40B4             ;; and BC is equivalent to the number in the bottom row in our algorithm
0067   40B4             multiply16
0068   40B4 3E 10           ld a,16     ; this is the number of bits of the number to process
0069   40B6 21 00 00        ld hl,0     ; HL is updated with the partial result, and at the end it will hold 
0070   40B9                             ; the final result.
0071   40B9             mul_loop
0072   40B9 CB 38           srl b
0073   40BB CB 19           rr c        ;; divide BC by 2 and shifting the state of bit 0 into the carry
0074   40BD                             ;; if carry = 0, then state of bit 0 was 0, (the rightmost digit was 0) 
0075   40BD                             ;; if carry = 1, then state of bit 1 was 1. (the rightmost digit was 1)
0076   40BD                             ;; if rightmost digit was 0, then the result would be 0, and we do the add.
0077   40BD                             ;; if rightmost digit was 1, then the result is DE and we do the add.
0078   40BD 30 01           jr nc,no_add	
0079   40BF             
0080   40BF                 ;; will get to here if carry = 1        
0081   40BF 19              add hl,de   
0082   40C0             
0083   40C0             no_add
0084   40C0                 ;; at this point BC has already been divided by 2
0085   40C0             
0086   40C0 EB              ex de,hl    ;; swap DE and HL
0087   40C1 29              add hl,hl   ;; multiply DE by 2
0088   40C2 EB              ex de,hl    ;; swap DE and HL
0089   40C3             
0090   40C3                 ;; at this point DE has been multiplied by 2
0091   40C3                 
0092   40C3 3D              dec a
0093   40C4 20 F3           jr nz,mul_loop  ;; process more bits
0094   40C6             
0095   40C6 C9          	ret
0096   40C7             	
0097   40C7             zero16				; zero 16bits starting from hl,
0098   40C7             					; b and hl clobbered by this
0099   40C7 06 02       	ld b,2			; set loop control variable for next loop
0100   40C9             zero16_loop
0101   40C9 36 00       	ld (hl),0			; set the thing hl points to to a constant
0102   40CB 23          	inc hl	
0103   40CC 10 FB       	djnz zero16_loop		; jump if loop control variable not zero
0104   40CE C9          	ret
0105   40CF             
0106   40CF             
0107   40CF             	
0108   40CF             start
0109   40CF             
0110   40CF CD 2A 0A    	call CLS	
0111   40D2             
0112   40D2 21 85 40    	ld hl, m1		
0113   40D5 36 01       	ld (hl),1
0114   40D7             	
0115   40D7 21 87 40    	ld hl, m2		
0116   40DA 36 03       	ld (hl),3		
0117   40DC             
0118   40DC 21 8D 40    	ld hl,mainLoopCount  ; number of lines per screen to display
0119   40DF 3E 12       	ld a,18
0120   40E1 77          	ld (hl),a
0121   40E2             
0122   40E2 21 8E 40    	ld hl,mainCLSCountDown_mem  ;; limit the number of screen clears 
0123   40E5 3E 01       	ld a,1
0124   40E7 77          	ld (hl),a
0125   40E8             	
0126   40E8             mainloop		
0127   40E8 ED 5B 85 40 	ld de, (m1)
0128   40EC ED 4B 87 40 	ld bc, (m2)		
0129   40F0 CD B4 40    	call multiply16  	; de and bc contain numbers to mulitply, hl contains result
0130   40F3             
0131   40F3 22 89 40    	ld (answer), hl
0132   40F6 21 89 40    	ld hl, answer
0133   40F9 11 8B 40    	ld de, to_print		
0134   40FC 01 02 00    	ld bc, 2
0135   40FF ED B0       	ldir	
0136   4101             	
0137   4101 CD 8F 40    	call hprint16 		; print a 16 bit number as hex
0138   4104             
0139   4104 2A 85 40    	ld hl, (m1)
0140   4107 23          	inc hl				; add one, we're printing times tables here
0141   4108 22 85 40    	ld (m1), hl
0142   410B             	
0143   410B 21 8D 40    	ld hl,mainLoopCount
0144   410E 7E          	ld a,(hl)	
0145   410F 3D          	dec a
0146   4110 C2 27 41    	jp nz, skip
0147   4113             		
0148   4113 21 8D 40    	ld hl,mainLoopCount
0149   4116 3E 12       	ld a,18
0150   4118 77          	ld (hl),a	
0151   4119             
0152   4119 21 8E 40    	ld hl,mainCLSCountDown_mem
0153   411C 7E          	ld a, (hl)
0154   411D 3D          	dec a
0155   411E CA 2B 41    	jp z, endPROG
0156   4121             	
0157   4121 CD 2A 0A    	call CLS		
0158   4124 C3 E8 40    	jp mainloop
0159   4127             	
0160   4127             skip
0161   4127             	;ld hl,mainLoopCount
0162   4127 77          	ld (hl),a			; save a back to (hl) (mainLoopCount)
0163   4128             	
0164   4128 C3 E8 40    	jp mainloop	
0165   412B             	
0166   412B             endPROG
0167   412B C9          	ret
0168   412C             
0169   412C             
0170   412C             
0171   412C             
0172   412C             
0173   412C             ;include our variables
0174   412C             #include "vars.asm"
0001+  412C             ;our variables
0002+  412C             
0175   412C             
0176   412C             ; ===========================================================
0177   412C             ; code ends
0178   412C             ; ===========================================================
0179   412C             ;end the REM line and put in the RAND USR line to call our 'hex code'
0180   412C             #include "line2.asm"
0001+  412C             ;this is the end of line 1 - the REM			
0002+  412C 76          				DEFB $76                        ; Newline				
0003+  412D             ;followed by the the RAND USR line				
0004+  412D             Line1End       
0005+  412D 00 0A       Line2			DEFB $00,$0a
0006+  412F 0E 00                       DEFW Line2End-Line2Text
0007+  4131 F9 D4       Line2Text     	DEFB $F9,$D4                    ; RAND USR
0008+  4133 1D 22 21 1D 				DEFB $1D,$22,$21,$1D,$20        ; 16514                
0008+  4137 20 
0009+  4138 7E                          DEFB $7E                        ; Number
0010+  4139 8F 01 04 00                 DEFB $8F,$01,$04,$00,$00        ; Numeric encoding
0010+  413D 00 
0011+  413E 76                          DEFB $76                        ; Newline
0012+  413F             Line2End 
0181   413F             
0182   413F             ;display file defintion
0183   413F             #include "screen.asm"               
0001+  413F             ;ZX81 screens
0002+  413F             ; Display file (ZX81 screen) - low res screen
0003+  413F 76          Display        	DEFB $76     
0004+  4140 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 0
0004+  4144 00 00 00 00 
0004+  4148 00 00 00 00 
0004+  414C 00 00 00 00 
0004+  4150 00 00 00 00 
0004+  4154 00 00 00 00 
0004+  4158 00 00 00 00 
0004+  415C 00 00 00 00 
0004+  4160 76 
0005+  4161 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 1
0005+  4165 00 00 00 00 
0005+  4169 00 00 00 00 
0005+  416D 00 00 00 00 
0005+  4171 00 00 00 00 
0005+  4175 00 00 00 00 
0005+  4179 00 00 00 00 
0005+  417D 00 00 00 00 
0005+  4181 76 
0006+  4182 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 2
0006+  4186 00 00 00 00 
0006+  418A 00 00 00 00 
0006+  418E 00 00 00 00 
0006+  4192 00 00 00 00 
0006+  4196 00 00 00 00 
0006+  419A 00 00 00 00 
0006+  419E 00 00 00 00 
0006+  41A2 76 
0007+  41A3 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 3
0007+  41A7 00 00 00 00 
0007+  41AB 00 00 00 00 
0007+  41AF 00 00 00 00 
0007+  41B3 00 00 00 00 
0007+  41B7 00 00 00 00 
0007+  41BB 00 00 00 00 
0007+  41BF 00 00 00 00 
0007+  41C3 76 
0008+  41C4 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 4
0008+  41C8 00 00 00 00 
0008+  41CC 00 00 00 00 
0008+  41D0 00 00 00 00 
0008+  41D4 00 00 00 00 
0008+  41D8 00 00 00 00 
0008+  41DC 00 00 00 00 
0008+  41E0 00 00 00 00 
0008+  41E4 76 
0009+  41E5 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 5
0009+  41E9 00 00 00 00 
0009+  41ED 00 00 00 00 
0009+  41F1 00 00 00 00 
0009+  41F5 00 00 00 00 
0009+  41F9 00 00 00 00 
0009+  41FD 00 00 00 00 
0009+  4201 00 00 00 00 
0009+  4205 76 
0010+  4206 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 6
0010+  420A 00 00 00 00 
0010+  420E 00 00 00 00 
0010+  4212 00 00 00 00 
0010+  4216 00 00 00 00 
0010+  421A 00 00 00 00 
0010+  421E 00 00 00 00 
0010+  4222 00 00 00 00 
0010+  4226 76 
0011+  4227 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 7
0011+  422B 00 00 00 00 
0011+  422F 00 00 00 00 
0011+  4233 00 00 00 00 
0011+  4237 00 00 00 00 
0011+  423B 00 00 00 00 
0011+  423F 00 00 00 00 
0011+  4243 00 00 00 00 
0011+  4247 76 
0012+  4248 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 8
0012+  424C 00 00 00 00 
0012+  4250 00 00 00 00 
0012+  4254 00 00 00 00 
0012+  4258 00 00 00 00 
0012+  425C 00 00 00 00 
0012+  4260 00 00 00 00 
0012+  4264 00 00 00 00 
0012+  4268 76 
0013+  4269 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 9
0013+  426D 00 00 00 00 
0013+  4271 00 00 00 00 
0013+  4275 00 00 00 00 
0013+  4279 00 00 00 00 
0013+  427D 00 00 00 00 
0013+  4281 00 00 00 00 
0013+  4285 00 00 00 00 
0013+  4289 76 
0014+  428A 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 10
0014+  428E 00 00 00 00 
0014+  4292 00 00 00 00 
0014+  4296 00 00 00 00 
0014+  429A 00 00 00 00 
0014+  429E 00 00 00 00 
0014+  42A2 00 00 00 00 
0014+  42A6 00 00 00 00 
0014+  42AA 76 
0015+  42AB 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 11
0015+  42AF 00 00 00 00 
0015+  42B3 00 00 00 00 
0015+  42B7 00 00 00 00 
0015+  42BB 00 00 00 00 
0015+  42BF 00 00 00 00 
0015+  42C3 00 00 00 00 
0015+  42C7 00 00 00 00 
0015+  42CB 76 
0016+  42CC 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 12
0016+  42D0 00 00 00 00 
0016+  42D4 00 00 00 00 
0016+  42D8 00 00 00 00 
0016+  42DC 00 00 00 00 
0016+  42E0 00 00 00 00 
0016+  42E4 00 00 00 00 
0016+  42E8 00 00 00 00 
0016+  42EC 76 
0017+  42ED 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 13
0017+  42F1 00 00 00 00 
0017+  42F5 00 00 00 00 
0017+  42F9 00 00 00 00 
0017+  42FD 00 00 00 00 
0017+  4301 00 00 00 00 
0017+  4305 00 00 00 00 
0017+  4309 00 00 00 00 
0017+  430D 76 
0018+  430E 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 14
0018+  4312 00 00 00 00 
0018+  4316 00 00 00 00 
0018+  431A 00 00 00 00 
0018+  431E 00 00 00 00 
0018+  4322 00 00 00 00 
0018+  4326 00 00 00 00 
0018+  432A 00 00 00 00 
0018+  432E 76 
0019+  432F 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 15
0019+  4333 00 00 00 00 
0019+  4337 00 00 00 00 
0019+  433B 00 00 00 00 
0019+  433F 00 00 00 00 
0019+  4343 00 00 00 00 
0019+  4347 00 00 00 00 
0019+  434B 00 00 00 00 
0019+  434F 76 
0020+  4350 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 16
0020+  4354 00 00 00 00 
0020+  4358 00 00 00 00 
0020+  435C 00 00 00 00 
0020+  4360 00 00 00 00 
0020+  4364 00 00 00 00 
0020+  4368 00 00 00 00 
0020+  436C 00 00 00 00 
0020+  4370 76 
0021+  4371 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 17
0021+  4375 00 00 00 00 
0021+  4379 00 00 00 00 
0021+  437D 00 00 00 00 
0021+  4381 00 00 00 00 
0021+  4385 00 00 00 00 
0021+  4389 00 00 00 00 
0021+  438D 00 00 00 00 
0021+  4391 76 
0022+  4392 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 18
0022+  4396 00 00 00 00 
0022+  439A 00 00 00 00 
0022+  439E 00 00 00 00 
0022+  43A2 00 00 00 00 
0022+  43A6 00 00 00 00 
0022+  43AA 00 00 00 00 
0022+  43AE 00 00 00 00 
0022+  43B2 76 
0023+  43B3 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 19
0023+  43B7 00 00 00 00 
0023+  43BB 00 00 00 00 
0023+  43BF 00 00 00 00 
0023+  43C3 00 00 00 00 
0023+  43C7 00 00 00 00 
0023+  43CB 00 00 00 00 
0023+  43CF 00 00 00 00 
0023+  43D3 76 
0024+  43D4 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 20
0024+  43D8 00 00 00 00 
0024+  43DC 00 00 00 00 
0024+  43E0 00 00 00 00 
0024+  43E4 00 00 00 00 
0024+  43E8 00 00 00 00 
0024+  43EC 00 00 00 00 
0024+  43F0 00 00 00 00 
0024+  43F4 76 
0025+  43F5 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 21
0025+  43F9 00 00 00 00 
0025+  43FD 00 00 00 00 
0025+  4401 00 00 00 00 
0025+  4405 00 00 00 00 
0025+  4409 00 00 00 00 
0025+  440D 00 00 00 00 
0025+  4411 00 00 00 00 
0025+  4415 76 
0026+  4416 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 22
0026+  441A 00 00 00 00 
0026+  441E 00 00 00 00 
0026+  4422 00 00 00 00 
0026+  4426 00 00 00 00 
0026+  442A 00 00 00 00 
0026+  442E 00 00 00 00 
0026+  4432 00 00 00 00 
0026+  4436 76 
0027+  4437 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 23
0027+  443B 00 00 00 00 
0027+  443F 00 00 00 00 
0027+  4443 00 00 00 00 
0027+  4447 00 00 00 00 
0027+  444B 00 00 00 00 
0027+  444F 00 00 00 00 
0027+  4453 00 00 00 00 
0027+  4457 76 
0028+  4458             
0184   4458             
0185   4458             ;close out the basic program
0186   4458             #include "endbasic.asm"
0001+  4458             ; close out the BASIC program structure
0002+  4458             ; BASIC Variables area
0003+  4458             Variables:      
0004+  4458 80          VariablesEnd:   DEFB $80
0005+  4459             BasicEnd:                              
0006+  4459             
0007+  4459             
0008+  4459             #END
0187   4459             
tasm: Number of errors = 0
